'.source.js':

  'output':
    'prefix': 'op '
    'body': "// OUTPUT: "

  'object':
    'prefix': 'o '
    'body': "{'$1': $2}"

  'object-segment':
    'prefix': ' oo'
    'body': ", '$1': $2"

  'typeof':
    'prefix': 'to '
    'body': "typeof "

  'console.log':
    'prefix': 'l '
    'body': "console.log($1);"

  'for':
    'prefix': 'fo '
    'body': """
			for ($1; $2; $3) {
				$4
			}
		"""

  'if':
    'prefix': 'i '
    'body': """
			if ($1) {
				$2
			}
		"""

  'while':
    'prefix': 'w '
    'body': """
			while ($1) {
				$2
			}
		"""

  'prototype':
    'prefix': 'pt '
    'body': "prototype"

  'func':
    'prefix': 'f '
    'body': "function($1){ $2 }"

  'function':
    'prefix': 'fn '
    'body': """
			function $1($2) {
				$3
			}
			$4
		"""

  'function':
    'prefix': 'f; '
    'body': """
			function($1) {
				$2
			};
		"""



  'arguments':
    'prefix': 'a '
    'body': "arguments"

  'arguments_':
    'prefix': 'arg '
    'body': "arguments[$1]"






'.source.erlang':
  'Module':
    'prefix': 'mod '
    'body': '-module($1).\n$2'

  'Export':
    'prefix': 'e '
    'body': '-export([$1]).\n$2'

  '~':
    'prefix': '..'
    'body': '~$1'
  '~n':
    'prefix': '..n'
    'body': '~n$1'
  '~p':
    'prefix': '..p'
    'body': '~p$1'
  '~w':
    'prefix': '..w'
    'body': '~w$1'

  'Print':
    'prefix': 'p '
    'body': 'io:format("~p ~n", [$1]),\n$2'

  'Debug ':
    'prefix': 'd '
    'body': """
			Self = [node(), ?MODULE, ?FUNCTION_NAME, self()],
			dbg:log(Self, st),
		"""

  'dbg ':
    'prefix': 'dbg '
    'body': 'dbg:log(Self, st),'

  'Output':
    'prefix': 'o '
    'body': '% OUTPUT: $1\n$2'

  'Fun':
    'prefix': 'f '
    'body': 'fun() -> $1 end$2'

  'receive ':
    'prefix': 'r '
    'body': """
			receive
				$1
			end.
		"""

  'Main Template':
    'prefix': 'main '
    'body': """
			-module(main$1).
			-export([init/0]).

			init() ->
				$2
		"""
